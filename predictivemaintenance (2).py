# -*- coding: utf-8 -*-
"""PredictiveMaintenance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vseJXEL5YA2NCR3HYGXpJG1oXDG0snKl
"""

from google.colab import files
uploaded = files.upload()

"""#Importing Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Importing the dataset"""

df = pd.read_csv('predictive_maintenance.csv')
x = df.iloc[:, 2:-2].values
y = df.iloc[:, 9:].values

y=np.array(y)
print(np.unique(y))

"""# Taking care of missing values"""

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.nan,strategy='mean')
imputer.fit(x[:,1:])
x[:,1:]=imputer.transform(x[:,1:])

"""# Encoding categorical data"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[0])],
                       remainder='passthrough')
x = np.array(ct.fit_transform(x))
print(x)
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y=le.fit_transform(y)
print(y)

y=np.array(y)
print(np.unique(y))

"""# Spliting dataset into the training set and Test set"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,
                                                     random_state=1)

"""#Feature Scaling"""

from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
x_train[:,3:]=ss.fit_transform(x_train[:,3:])
x_test[:,3:]=ss.transform(x_test[:,3:])

print(x_train)

"""#Random forest"""

from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(n_estimators=100,criterion='entropy',
                                  random_state=0)
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print(y_pred)

import joblib
joblib.dump(classifier, "./random_forest.joblib")

loaded_rf = joblib.load("./random_forest.joblib")

loaded_rf.predict(x_test)

print(y_test)

l=["M",398.8,408.4,2778,11.6,88]#M,298.2,308.5,2678,10.7,86,1,Power Failure
l=np.array(l)

lct=ct.transform(l.reshape(1,-1))

print(lct[0:3])

lss=ss.transform(lct[0][3:].reshape(1, -1))

print(lss)

print(lss.shape,lct.shape)

tst=np.concatenate([lct[0][0:3],lss[0]])

classifier.predict(tst.reshape(1,-1))

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)